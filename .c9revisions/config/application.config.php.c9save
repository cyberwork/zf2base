{"ts":1377825641516,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n$env = getenv('APP_ENV') ?: 'production';\n\n// Use the $env value to determine which modules to load\n$modules = array(\n\t\t'Application',\n\t\t'DoctrineModule',\n\t\t'DoctrineORMModule'\n);\nif ($env == 'development') {\n\t$modules[] = 'ZendDeveloperTools';\n}\nreturn array(\n    // This should be an array of module namespaces used in the application.\n    'modules' => $modules,\n\n    // These are various options for the listeners attached to the ModuleManager\n    'module_listener_options' => array(\n        // This should be an array of paths in which modules reside.\n        // If a string key is provided, the listener will consider that a module\n        // namespace, the value of that key the specific path to that module's\n        // Module class.\n        'module_paths' => array(\n            './module',\n            './vendor',\n        ),\n\n        // An array of paths from which to glob configuration files after\n        // modules are loaded. These effectively override configuration\n        // provided by modules themselves. Paths may use GLOB_BRACE notation.\n        'config_glob_paths' => array(\n            'config/autoload/{,*.}{global,local}.php',\n        ),\n\n        // Whether or not to enable a configuration cache.\n        // If enabled, the merged configuration will be cached and used in\n        // subsequent requests.\n        //'config_cache_enabled' => $booleanValue,\n\n        // The key used to create the configuration cache file name.\n        //'config_cache_key' => $stringKey,\n\n        // Whether or not to enable a module class map cache.\n        // If enabled, creates a module class map cache which will be used\n        // by in future requests, to reduce the autoloading process.\n        //'module_map_cache_enabled' => $booleanValue,\n\n        // The key used to create the class map cache file name.\n        //'module_map_cache_key' => $stringKey,\n\n        // The path in which to cache merged configuration.\n        //'cache_dir' => $stringPath,\n\n        // Whether or not to enable modules dependency checking.\n        // Enabled by default, prevents usage of modules that depend on other modules\n        // that weren't loaded.\n        // 'check_dependencies' => true,\n    ),\n\n    // Used to create an own service manager. May contain one or more child arrays.\n    //'service_listener_options' => array(\n    //     array(\n    //         'service_manager' => $stringServiceManagerName,\n    //         'config_key'      => $stringConfigKey,\n    //         'interface'       => $stringOptionalInterface,\n    //         'method'          => $stringRequiredMethodName,\n    //     ),\n    // )\n\n   // Initial configuration with which to seed the ServiceManager.\n   // Should be compatible with Zend\\ServiceManager\\Config.\n   // 'service_manager' => array(),\n);\n"]],"start1":0,"start2":0,"length1":0,"length2":2785}]],"length":2785}
{"contributors":[],"silentsave":false,"ts":1377825670841,"patch":[[{"diffs":[[0,");\nif ($"],[-1,"env"],[1,"_SERVER['APPLICATION_ENV']"],[0," == 'dev"]],"start1":183,"start2":183,"length1":19,"length2":42}]],"length":2808,"saved":false}
